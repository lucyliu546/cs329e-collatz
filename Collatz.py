#!/usr/bin/env python3

# ---------------------------
# projects/collatz/Collatz.py
# Copyright (C) 2016
# Glenn P. Downing
# ---------------------------

# ------------
# collatz_read
# ------------

cache = {
( 1 ,2000 ) : 182 ,
( 10000 ,12000 ) : 268 ,
( 20000 ,22000 ) : 269 ,
( 30000 ,32000 ) : 285 ,
( 40000 ,42000 ) : 288 ,
( 50000 ,52000 ) : 309 ,
( 60000 ,62000 ) : 335 ,
( 70000 ,72000 ) : 325 ,
( 80000 ,82000 ) : 320 ,
( 90000 ,92000 ) : 333 ,
( 100000 ,102000 ) : 341 ,
( 110000 ,112000 ) : 323 ,
( 120000 ,122000 ) : 336 ,
( 130000 ,132000 ) : 331 ,
( 140000 ,142000 ) : 344 ,
( 150000 ,152000 ) : 370 ,
( 160000 ,162000 ) : 370 ,
( 170000 ,172000 ) : 334 ,
( 180000 ,182000 ) : 365 ,
( 190000 ,192000 ) : 329 ,
( 200000 ,202000 ) : 342 ,
( 210000 ,212000 ) : 355 ,
( 220000 ,222000 ) : 355 ,
( 230000 ,232000 ) : 443 ,
( 240000 ,242000 ) : 368 ,
( 250000 ,252000 ) : 332 ,
( 260000 ,262000 ) : 332 ,
( 270000 ,272000 ) : 407 ,
( 280000 ,282000 ) : 358 ,
( 290000 ,292000 ) : 327 ,
( 300000 ,302000 ) : 371 ,
( 310000 ,312000 ) : 371 ,
( 320000 ,322000 ) : 371 ,
( 330000 ,332000 ) : 322 ,
( 340000 ,342000 ) : 335 ,
( 350000 ,352000 ) : 379 ,
( 360000 ,362000 ) : 410 ,
( 370000 ,372000 ) : 392 ,
( 380000 ,382000 ) : 379 ,
( 390000 ,392000 ) : 361 ,
( 400000 ,402000 ) : 387 ,
( 410000 ,412000 ) : 449 ,
( 420000 ,422000 ) : 343 ,
( 430000 ,432000 ) : 343 ,
( 440000 ,442000 ) : 325 ,
( 450000 ,452000 ) : 387 ,
( 460000 ,462000 ) : 444 ,
( 470000 ,472000 ) : 307 ,
( 480000 ,482000 ) : 413 ,
( 490000 ,492000 ) : 320 ,
( 500000 ,502000 ) : 364 ,
( 510000 ,512000 ) : 470 ,
( 520000 ,522000 ) : 364 ,
( 530000 ,532000 ) : 346 ,
( 540000 ,542000 ) : 408 ,
( 550000 ,552000 ) : 377 ,
( 560000 ,562000 ) : 359 ,
( 570000 ,572000 ) : 377 ,
( 580000 ,582000 ) : 328 ,
( 590000 ,592000 ) : 403 ,
( 600000 ,602000 ) : 403 ,
( 610000 ,612000 ) : 354 ,
( 620000 ,622000 ) : 372 ,
( 630000 ,632000 ) : 341 ,
( 640000 ,642000 ) : 416 ,
( 650000 ,652000 ) : 341 ,
( 660000 ,662000 ) : 323 ,
( 670000 ,672000 ) : 323 ,
( 680000 ,682000 ) : 336 ,
( 690000 ,692000 ) : 442 ,
( 700000 ,702000 ) : 411 ,
( 710000 ,712000 ) : 380 ,
( 720000 ,722000 ) : 411 ,
( 730000 ,732000 ) : 380 ,
( 740000 ,742000 ) : 393 ,
( 750000 ,752000 ) : 362 ,
( 760000 ,762000 ) : 380 ,
( 770000 ,772000 ) : 349 ,
( 780000 ,782000 ) : 362 ,
( 790000 ,792000 ) : 375 ,
( 800000 ,802000 ) : 406 ,
( 810000 ,812000 ) : 406 ,
( 820000 ,822000 ) : 450 ,
( 830000 ,832000 ) : 419 ,
( 840000 ,842000 ) : 357 ,
( 850000 ,852000 ) : 357 ,
( 860000 ,862000 ) : 357 ,
( 870000 ,872000 ) : 432 ,
( 880000 ,882000 ) : 326 ,
( 890000 ,892000 ) : 339 ,
( 900000 ,902000 ) : 401 ,
( 910000 ,912000 ) : 476 ,
( 920000 ,922000 ) : 339 ,
( 930000 ,932000 ) : 370 ,
( 940000 ,942000 ) : 383 ,
( 950000 ,952000 ) : 414 ,
( 960000 ,962000 ) : 414 ,
( 970000 ,972000 ) : 458 ,
( 980000 ,982000 ) : 427 ,
( 990000 ,992000 ) : 321 ,
}


def collatz_read(s):
    """
    read two ints
    s a string
    return a list of two ints, representing the beginning and end of a range, [i, j]
    """
    a = s.split()
    return [int(a[0]), int(a[1])]

# ------------
# collatz_eval
# ------------


def collatz_eval(i, j):
    """
    i the beginning of the range, inclusive
    j the end       of the range, inclusive
    return the max cycle length of the range [i, j]
    """
    # assert (i >= 0 and j >= 0), "You cannot have negative values!"
    # assert (i != None  and j!= None), "You must enter 2 values!"
    # tested assertions but removed for final code

    if i > j:
        i,j = j, i
    max_length = 0
    if (i , j ) in cache:
            max_length = cache[(i, j)]
            return max_length
    for x in range(i, j+1):
        current_length = 1
        while x > 1:
         if (x % 2) == 0:
            x = (x // 2)
         else:
            x = (3 * x) + 1
         current_length += 1
        if current_length > max_length:
            max_length = current_length
    return max_length

# -------------
# collatz_print
# -------------


def collatz_print(w, i, j, v):
    """
    print three ints
    w a writer
    i the beginning of the range, inclusive
    j the end       of the range, inclusive
    v the max cycle length
    """
    w.write(str(i) + " " + str(j) + " " + str(v) + "\n")

# -------------
# collatz_solve
# -------------


def collatz_solve(r, w):
    """
    r a reader
    w a writer
    """
    for s in r:
        i, j = collatz_read(s)
        v = collatz_eval(i, j)
        collatz_print(w, i, j, v)
